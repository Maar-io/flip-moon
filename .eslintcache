[{"/Volumes/Data2TB/projects/flip-moon/src/index.js":"1","/Volumes/Data2TB/projects/flip-moon/src/App.js":"2","/Volumes/Data2TB/projects/flip-moon/src/abi.js":"3"},{"size":220,"mtime":1609189615000,"results":"4","hashOfConfig":"5"},{"size":4954,"mtime":1609516809000,"results":"6","hashOfConfig":"5"},{"size":3999,"mtime":1609517964000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"kqv0cv",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/Volumes/Data2TB/projects/flip-moon/src/index.js",[],["17","18"],"/Volumes/Data2TB/projects/flip-moon/src/App.js",["19"],"import { useState, useEffect} from 'react'\nimport Web3 from 'web3'\nimport abiJson from './abi';\n\nconst MOONBASE_ALPHA = 'https://rpc.testnet.moonbeam.network'\nconst OWNER = \"0x8F10433FC11b70a15128aAF0b30B906627808296\"\nvar contractInstance;\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:9933\")\nconsole.log(\"web3 version = \" + web3.version);\n\nfunction App() {\n  const [account, setAccount] = useState('')\n  const [balance, setBalance] = useState(0)\n  const [connected, setConnected] = useState(false)\n\n  async function loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(MOONBASE_ALPHA)\n      await window.ethereum.enable()\n      setConnected(true)\n      console.log(\"connected \", connected)\n\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(MOONBASE_ALPHA)\n      setConnected(true)\n      console.log(\"web3 connected \", connected)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  } \n\n  async function loadBlockchainData() {\n\n    const network = await web3.eth.net.getNetworkType()\n    console.log(network)\n    \n    console.log(\"load connected \", connected)\n\n    const accounts = await web3.eth.getAccounts()\n    console.log(\"accounts\", accounts)\n    setAccount(accounts[0])\n    console.log(\"accounts[0]=\", accounts[0])\n    \n    if (accounts[0]){\n      web3.eth.getBalance(accounts[0]).then(bal => {\n        setBalance(web3.utils.fromWei(bal, 'ether'))\n      })\n    }\n    console.log(\"Balance in ETH\", balance)\n    if(!contractInstance){\n      contractInstance = new web3.eth.Contract(abiJson.abi, abiJson.address, {from: accounts[0]});\n      console.log(\"new contractInstance\", contractInstance)\n    }\n    else console.log(\"existing contractInstance\", contractInstance)\n  }\n\n  async function getPlayerData() {\n      console.log(\"Refresh statistics\");\n      contractInstance.methods.getPlayerData().call()\n      .then((res) => {\n              console.log(\"statistics\", res);\n          });\n  }\n\n  async function getContractBalance() {\n      console.log(\"get Contract Balance\");\n      contractInstance.methods.getContractBalance().call()\n      .then((res) => {\n              console.log(\"getContractBalance\", res);\n          });\n  }\n\n  async function flipCoin(betHead) {\n      console.log(\"flipCoin\", betHead);\n      var weiValue = web3.utils.toWei('10','milli');\n      contractInstance.methods.flipCoin(betHead).send({gas: 3000000, value: weiValue})\n      .then((res) => {\n              console.log(\"flipCoin\", res);\n          });\n      eventListener();\n  }\n\n  async function deposit() {\n      console.log(\"deposit\");\n      var weiValue = web3.utils.toWei('100','milli');\n      contractInstance.methods.depositFunds().send({OWNER, gas: 3000000, value: weiValue})\n      .on('receipt', function(rec){\n\n        console.log(\"deposit receipt\", rec);\n      })\n      .on('error', function(err){\n        console.log(\"deposit err\", err);\n      });\n  }\n  \n  async function withdrawAll() {\n      console.log(\"withdrawAll\");\n      var transferedBalance = contractInstance.methods.withdrawAll().call()\n      .on('receipt', (rec) => {\n        console.log(\"transferedBalance\", transferedBalance);\n        console.log(\"withdrawAll receipt\", rec);\n      })\n      .on('error', (err) => {\n        console.log(\"withdrawAll err\", err);\n      });\n  }\n\n  function eventListener(){\n    console.log(\"set event listeners\");\n    contractInstance.events.playerRegistered(function(error, result) {\n        console.log(\"Event playerRegistered\");\n        if (!error){\n            console.log(\"Player \" + result[\"returnValues\"][0] + \" is registered with contract\");\n        }\n        else{\n            console.log(\"error in playerRegistered\");\n            console.log(error);\n        }\n    });\n\n    contractInstance.events.coinFlipResult(function(error, result) {\n        console.log(\"Event coinFlipResult\");\n        if (!error){\n            console.log(\"flip result\", result);\n            if (result[\"returnValues\"][2] > 0){\n                console.log(\"You won!!!!!\");\n            }\n            else {\n                console.log(\"You lost :(\");\n            }\n        }\n        else{\n            console.log(\"error in coinFlipResult\");\n            console.log(error);\n        }\n    });\n  }\n\n  useEffect(() => {\n    loadBlockchainData()\n  }, [connected, balance])\n\n  if (!connected) {\n    return (\n      <button onClick={loadWeb3} >Connect</button>\n    )\n  }\n  else{\n    return(\n      <>\n      <h4> Connected account: {account}</h4>\n      <h4> Balance in ETH: {balance}</h4>\n      <button onClick={getContractBalance} >ContractBalance</button>\n      <button onClick={getPlayerData} >getPlayerData</button>\n      <button onClick={deposit} >Deposit</button>\n      <button onClick={withdrawAll} >withdrawAll</button>\n      <button onClick={() => flipCoin(true)}>Head</button>\n      <button onClick={() => flipCoin(false)}>Tail</button>\n      </>\n    )\n  }\n}\nexport default App;\n","/Volumes/Data2TB/projects/flip-moon/src/abi.js",["20"],"export default {\n    address: \"0xA0886958c8aF74B99402Bba5dF520C8D14AeD0aE\",\n    abi: [\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": false,\n              \"internalType\": \"string\",\n              \"name\": \"messageToPlayer\",\n              \"type\": \"string\"\n            },\n            {\n              \"indexed\": false,\n              \"internalType\": \"address\",\n              \"name\": \"creator\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": false,\n              \"internalType\": \"uint256\",\n              \"name\": \"toTransfer\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"coinFlipResult\",\n          \"type\": \"event\"\n        },\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": false,\n              \"internalType\": \"address\",\n              \"name\": \"adr\",\n              \"type\": \"address\"\n            }\n          ],\n          \"name\": \"playerRegistered\",\n          \"type\": \"event\"\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"balance\",\n          \"outputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\",\n          \"constant\": true\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"creators\",\n          \"outputs\": [\n            {\n              \"internalType\": \"address payable\",\n              \"name\": \"\",\n              \"type\": \"address\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\",\n          \"constant\": true\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"owner\",\n          \"outputs\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"\",\n              \"type\": \"address\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\",\n          \"constant\": true\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"depositFunds\",\n          \"outputs\": [],\n          \"stateMutability\": \"payable\",\n          \"type\": \"function\",\n          \"payable\": true\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"bool\",\n              \"name\": \"betOnHead\",\n              \"type\": \"bool\"\n            }\n          ],\n          \"name\": \"flipCoin\",\n          \"outputs\": [],\n          \"stateMutability\": \"payable\",\n          \"type\": \"function\",\n          \"payable\": true\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"getPlayerData\",\n          \"outputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"won\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"lost\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"plays\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\",\n          \"constant\": true\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"getContractBalance\",\n          \"outputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\",\n          \"constant\": true\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"withdrawAll\",\n          \"outputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"nonpayable\",\n          \"type\": \"function\"\n        }\n      ]\n}",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":144,"column":6,"nodeType":"27","endLine":144,"endColumn":26,"suggestions":"28"},{"ruleId":"29","severity":1,"message":"30","line":1,"column":1,"nodeType":"31","endLine":164,"endColumn":2},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadBlockchainData'. Either include it or remove the dependency array.","ArrayExpression",["34"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"35","fix":"36"},"Update the dependencies array to be: [connected, balance, loadBlockchainData]",{"range":"37","text":"38"},[4321,4341],"[connected, balance, loadBlockchainData]"]